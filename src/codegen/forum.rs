// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateFoodPostRequest {
    #[prost(message, optional, tag = "1")]
    pub post: ::core::option::Option<super::food_post::FoodPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateAmusementPostRequest {
    #[prost(message, optional, tag = "1")]
    pub post: ::core::option::Option<super::amusement_post::AmusementPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSellPostRequest {
    #[prost(message, optional, tag = "1")]
    pub post: ::core::option::Option<super::sell_post::SellPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeletePostRequest {
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    #[prost(int32, tag = "3")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeletePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPostRequest {
    /// int32 user_id = 1;
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFoodPostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub post: ::core::option::Option<super::food_post::FoodPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSellPostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub post: ::core::option::Option<super::sell_post::SellPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAmusementPostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, optional, tag = "2")]
    pub post: ::core::option::Option<super::amusement_post::AmusementPost>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListPersonalPostsRequest {
    #[prost(enumeration = "super::post::PostType", tag = "1")]
    pub post_type: i32,
    #[prost(int32, optional, tag = "2")]
    pub user_id: ::core::option::Option<i32>,
    #[prost(enumeration = "ListRequestType", tag = "3")]
    pub r#type: i32,
    #[prost(int32, tag = "4")]
    pub number: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPersonalPostsResponse {
    #[prost(oneof = "list_personal_posts_response::Message", tags = "1, 2, 3")]
    pub message: ::core::option::Option<list_personal_posts_response::Message>,
}
/// Nested message and enum types in `ListPersonalPostsResponse`.
pub mod list_personal_posts_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Message {
        #[prost(message, tag = "1")]
        FResponse(super::ListFoodPostsResponse),
        #[prost(message, tag = "2")]
        SResponse(super::ListSellPostsResponse),
        #[prost(message, tag = "3")]
        AResponse(super::ListAmusementPostsResponse),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListFoodPostsRequest {
    /// food post
    #[prost(enumeration = "super::food_post::Place", tag = "1")]
    pub food_place: i32,
    #[prost(int32, tag = "2")]
    pub score_lowbond: i32,
    #[prost(bool, tag = "3")]
    pub random: bool,
    #[prost(int32, tag = "4")]
    pub number: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListSellPostsRequest {
    /// sell post
    #[prost(enumeration = "super::sell_post::GoodsType", tag = "1")]
    pub goods_type: i32,
    #[prost(int32, tag = "2")]
    pub price_upbond: i32,
    #[prost(int32, tag = "3")]
    pub number: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListAmusementPostsRequest {
    /// amusement post
    #[prost(enumeration = "super::amusement_post::GameType", tag = "1")]
    pub game_type: i32,
    #[prost(int32, tag = "2")]
    pub people_all_lowbound: i32,
    #[prost(int32, tag = "3")]
    pub people_all_upbound: i32,
    #[prost(int32, tag = "4")]
    pub people_diff_upbound: i32,
    #[prost(int32, tag = "5")]
    pub time_about: i32,
    #[prost(int32, tag = "6")]
    pub number: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListFoodPostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub posts: ::prost::alloc::vec::Vec<super::food_post::FoodPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListSellPostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub posts: ::prost::alloc::vec::Vec<super::sell_post::SellPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAmusementPostsResponse {
    #[prost(message, repeated, tag = "1")]
    pub posts: ::prost::alloc::vec::Vec<super::amusement_post::AmusementPost>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommentRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CommentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteCommentRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
    #[prost(int32, tag = "3")]
    pub comment_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteCommentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LikePostRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LikePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlikePostRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlikePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FavorateRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FavorateResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnfavorateRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnfavorateResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LikeCommentRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub comment_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct LikeCommentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlikeCommentRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub comment_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnlikeCommentResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePartAmusePostRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TakePartAmusePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NoTakePartAmusePostRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct NoTakePartAmusePostResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSoldRequest {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(int32, tag = "2")]
    pub post_id: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSoldResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ListRequestType {
    Star = 0,
    Takepart = 1,
    Own = 2,
}
impl ListRequestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ListRequestType::Star => "STAR",
            ListRequestType::Takepart => "TAKEPART",
            ListRequestType::Own => "OWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAR" => Some(Self::Star),
            "TAKEPART" => Some(Self::Takepart),
            "OWN" => Some(Self::Own),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod forum_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ForumClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ForumClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ForumClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ForumClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ForumClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_food_post(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateFoodPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/CreateFoodPost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "CreateFoodPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_amusement_post(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateAmusementPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/CreateAmusementPost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "CreateAmusementPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_sell_post(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSellPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/CreateSellPost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "CreateSellPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_post(
            &mut self,
            request: impl tonic::IntoRequest<super::DeletePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeletePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/DeletePost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "DeletePost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_food_post(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFoodPostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/GetFoodPost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "GetFoodPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_amusement_post(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAmusementPostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/GetAmusementPost",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "GetAmusementPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_sell_post(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSellPostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/GetSellPost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "GetSellPost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_personal_posts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPersonalPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPersonalPostsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/ListPersonalPosts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "ListPersonalPosts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_food_posts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListFoodPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListFoodPostsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/ListFoodPosts",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "ListFoodPosts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_sell_posts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListSellPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSellPostsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/ListSellPosts",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "ListSellPosts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_amusement_posts(
            &mut self,
            request: impl tonic::IntoRequest<super::ListAmusementPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAmusementPostsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/ListAmusementPosts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("forum.Forum", "ListAmusementPosts"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn comment(
            &mut self,
            request: impl tonic::IntoRequest<super::CommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CommentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/Comment");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "Comment"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_comment(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCommentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/DeleteComment",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "DeleteComment"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn like_post(
            &mut self,
            request: impl tonic::IntoRequest<super::LikePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/LikePost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "LikePost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unlike_post(
            &mut self,
            request: impl tonic::IntoRequest<super::UnlikePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnlikePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/UnlikePost");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "UnlikePost"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn like_comment(
            &mut self,
            request: impl tonic::IntoRequest<super::LikeCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikeCommentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/LikeComment");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "LikeComment"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unlike_comment(
            &mut self,
            request: impl tonic::IntoRequest<super::UnlikeCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnlikeCommentResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/forum.Forum/UnlikeComment",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "UnlikeComment"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn favorate(
            &mut self,
            request: impl tonic::IntoRequest<super::FavorateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FavorateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/Favorate");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "Favorate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unfavorate(
            &mut self,
            request: impl tonic::IntoRequest<super::UnfavorateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnfavorateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/Unfavorate");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "Unfavorate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn take_part(
            &mut self,
            request: impl tonic::IntoRequest<super::TakePartAmusePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TakePartAmusePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/TakePart");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "TakePart"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn no_take_part(
            &mut self,
            request: impl tonic::IntoRequest<super::NoTakePartAmusePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::NoTakePartAmusePostResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/NoTakePart");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "NoTakePart"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_sold(
            &mut self,
            request: impl tonic::IntoRequest<super::SetSoldRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SetSoldResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/forum.Forum/SetSold");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("forum.Forum", "SetSold"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod forum_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ForumServer.
    #[async_trait]
    pub trait Forum: std::marker::Send + std::marker::Sync + 'static {
        async fn create_food_post(
            &self,
            request: tonic::Request<super::CreateFoodPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        >;
        async fn create_amusement_post(
            &self,
            request: tonic::Request<super::CreateAmusementPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        >;
        async fn create_sell_post(
            &self,
            request: tonic::Request<super::CreateSellPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePostResponse>,
            tonic::Status,
        >;
        async fn delete_post(
            &self,
            request: tonic::Request<super::DeletePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeletePostResponse>,
            tonic::Status,
        >;
        async fn get_food_post(
            &self,
            request: tonic::Request<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetFoodPostResponse>,
            tonic::Status,
        >;
        async fn get_amusement_post(
            &self,
            request: tonic::Request<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetAmusementPostResponse>,
            tonic::Status,
        >;
        async fn get_sell_post(
            &self,
            request: tonic::Request<super::GetPostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSellPostResponse>,
            tonic::Status,
        >;
        async fn list_personal_posts(
            &self,
            request: tonic::Request<super::ListPersonalPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPersonalPostsResponse>,
            tonic::Status,
        >;
        async fn list_food_posts(
            &self,
            request: tonic::Request<super::ListFoodPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListFoodPostsResponse>,
            tonic::Status,
        >;
        async fn list_sell_posts(
            &self,
            request: tonic::Request<super::ListSellPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListSellPostsResponse>,
            tonic::Status,
        >;
        async fn list_amusement_posts(
            &self,
            request: tonic::Request<super::ListAmusementPostsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAmusementPostsResponse>,
            tonic::Status,
        >;
        async fn comment(
            &self,
            request: tonic::Request<super::CommentRequest>,
        ) -> std::result::Result<tonic::Response<super::CommentResponse>, tonic::Status>;
        async fn delete_comment(
            &self,
            request: tonic::Request<super::DeleteCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteCommentResponse>,
            tonic::Status,
        >;
        async fn like_post(
            &self,
            request: tonic::Request<super::LikePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikePostResponse>,
            tonic::Status,
        >;
        async fn unlike_post(
            &self,
            request: tonic::Request<super::UnlikePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnlikePostResponse>,
            tonic::Status,
        >;
        async fn like_comment(
            &self,
            request: tonic::Request<super::LikeCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::LikeCommentResponse>,
            tonic::Status,
        >;
        async fn unlike_comment(
            &self,
            request: tonic::Request<super::UnlikeCommentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnlikeCommentResponse>,
            tonic::Status,
        >;
        async fn favorate(
            &self,
            request: tonic::Request<super::FavorateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FavorateResponse>,
            tonic::Status,
        >;
        async fn unfavorate(
            &self,
            request: tonic::Request<super::UnfavorateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnfavorateResponse>,
            tonic::Status,
        >;
        async fn take_part(
            &self,
            request: tonic::Request<super::TakePartAmusePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TakePartAmusePostResponse>,
            tonic::Status,
        >;
        async fn no_take_part(
            &self,
            request: tonic::Request<super::NoTakePartAmusePostRequest>,
        ) -> std::result::Result<
            tonic::Response<super::NoTakePartAmusePostResponse>,
            tonic::Status,
        >;
        async fn set_sold(
            &self,
            request: tonic::Request<super::SetSoldRequest>,
        ) -> std::result::Result<tonic::Response<super::SetSoldResponse>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ForumServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ForumServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ForumServer<T>
    where
        T: Forum,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/forum.Forum/CreateFoodPost" => {
                    #[allow(non_camel_case_types)]
                    struct CreateFoodPostSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::CreateFoodPostRequest>
                    for CreateFoodPostSvc<T> {
                        type Response = super::CreatePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateFoodPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::create_food_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateFoodPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/CreateAmusementPost" => {
                    #[allow(non_camel_case_types)]
                    struct CreateAmusementPostSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::CreateAmusementPostRequest>
                    for CreateAmusementPostSvc<T> {
                        type Response = super::CreatePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateAmusementPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::create_amusement_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateAmusementPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/CreateSellPost" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSellPostSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::CreateSellPostRequest>
                    for CreateSellPostSvc<T> {
                        type Response = super::CreatePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateSellPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::create_sell_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSellPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/DeletePost" => {
                    #[allow(non_camel_case_types)]
                    struct DeletePostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::DeletePostRequest>
                    for DeletePostSvc<T> {
                        type Response = super::DeletePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeletePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::delete_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeletePostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/GetFoodPost" => {
                    #[allow(non_camel_case_types)]
                    struct GetFoodPostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::GetPostRequest>
                    for GetFoodPostSvc<T> {
                        type Response = super::GetFoodPostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::get_food_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFoodPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/GetAmusementPost" => {
                    #[allow(non_camel_case_types)]
                    struct GetAmusementPostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::GetPostRequest>
                    for GetAmusementPostSvc<T> {
                        type Response = super::GetAmusementPostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::get_amusement_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAmusementPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/GetSellPost" => {
                    #[allow(non_camel_case_types)]
                    struct GetSellPostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::GetPostRequest>
                    for GetSellPostSvc<T> {
                        type Response = super::GetSellPostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::get_sell_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSellPostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/ListPersonalPosts" => {
                    #[allow(non_camel_case_types)]
                    struct ListPersonalPostsSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::ListPersonalPostsRequest>
                    for ListPersonalPostsSvc<T> {
                        type Response = super::ListPersonalPostsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListPersonalPostsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::list_personal_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListPersonalPostsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/ListFoodPosts" => {
                    #[allow(non_camel_case_types)]
                    struct ListFoodPostsSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::ListFoodPostsRequest>
                    for ListFoodPostsSvc<T> {
                        type Response = super::ListFoodPostsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListFoodPostsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::list_food_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListFoodPostsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/ListSellPosts" => {
                    #[allow(non_camel_case_types)]
                    struct ListSellPostsSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::ListSellPostsRequest>
                    for ListSellPostsSvc<T> {
                        type Response = super::ListSellPostsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListSellPostsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::list_sell_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSellPostsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/ListAmusementPosts" => {
                    #[allow(non_camel_case_types)]
                    struct ListAmusementPostsSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::ListAmusementPostsRequest>
                    for ListAmusementPostsSvc<T> {
                        type Response = super::ListAmusementPostsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListAmusementPostsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::list_amusement_posts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListAmusementPostsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/Comment" => {
                    #[allow(non_camel_case_types)]
                    struct CommentSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::CommentRequest>
                    for CommentSvc<T> {
                        type Response = super::CommentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CommentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::comment(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CommentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/DeleteComment" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteCommentSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::DeleteCommentRequest>
                    for DeleteCommentSvc<T> {
                        type Response = super::DeleteCommentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteCommentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::delete_comment(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteCommentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/LikePost" => {
                    #[allow(non_camel_case_types)]
                    struct LikePostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::LikePostRequest>
                    for LikePostSvc<T> {
                        type Response = super::LikePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LikePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::like_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LikePostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/UnlikePost" => {
                    #[allow(non_camel_case_types)]
                    struct UnlikePostSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::UnlikePostRequest>
                    for UnlikePostSvc<T> {
                        type Response = super::UnlikePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnlikePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::unlike_post(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnlikePostSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/LikeComment" => {
                    #[allow(non_camel_case_types)]
                    struct LikeCommentSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::LikeCommentRequest>
                    for LikeCommentSvc<T> {
                        type Response = super::LikeCommentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::LikeCommentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::like_comment(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LikeCommentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/UnlikeComment" => {
                    #[allow(non_camel_case_types)]
                    struct UnlikeCommentSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::UnlikeCommentRequest>
                    for UnlikeCommentSvc<T> {
                        type Response = super::UnlikeCommentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnlikeCommentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::unlike_comment(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnlikeCommentSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/Favorate" => {
                    #[allow(non_camel_case_types)]
                    struct FavorateSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::FavorateRequest>
                    for FavorateSvc<T> {
                        type Response = super::FavorateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FavorateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::favorate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FavorateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/Unfavorate" => {
                    #[allow(non_camel_case_types)]
                    struct UnfavorateSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::UnfavorateRequest>
                    for UnfavorateSvc<T> {
                        type Response = super::UnfavorateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnfavorateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::unfavorate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnfavorateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/TakePart" => {
                    #[allow(non_camel_case_types)]
                    struct TakePartSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::TakePartAmusePostRequest>
                    for TakePartSvc<T> {
                        type Response = super::TakePartAmusePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TakePartAmusePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::take_part(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TakePartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/NoTakePart" => {
                    #[allow(non_camel_case_types)]
                    struct NoTakePartSvc<T: Forum>(pub Arc<T>);
                    impl<
                        T: Forum,
                    > tonic::server::UnaryService<super::NoTakePartAmusePostRequest>
                    for NoTakePartSvc<T> {
                        type Response = super::NoTakePartAmusePostResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::NoTakePartAmusePostRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::no_take_part(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = NoTakePartSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/forum.Forum/SetSold" => {
                    #[allow(non_camel_case_types)]
                    struct SetSoldSvc<T: Forum>(pub Arc<T>);
                    impl<T: Forum> tonic::server::UnaryService<super::SetSoldRequest>
                    for SetSoldSvc<T> {
                        type Response = super::SetSoldResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetSoldRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Forum>::set_sold(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetSoldSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", tonic::Code::Unimplemented as i32)
                                .header(
                                    http::header::CONTENT_TYPE,
                                    tonic::metadata::GRPC_CONTENT_TYPE,
                                )
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T> Clone for ForumServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "forum.Forum";
    impl<T> tonic::server::NamedService for ForumServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
